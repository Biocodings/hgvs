# HGVS Grammar
# 2013-09-16 10:25 Reece Hart <reecehart@gmail.com>
#
# References:
# 1. http://www.hgvs.org/mutnomen/
# 2. Describing structural changes by extending HGVS sequence variation nomenclature.
#    http://www.ncbi.nlm.nih.gov/pubmed/21309030
# 3. A formalized description of the standard human variant nomenclature...
#    http://www.ncbi.nlm.nih.gov/pubmed/21992071
# 
# QUESTIONS
# * grammar versions: 1, 2, lax, strict, etc
# * validation: strict
# * position singletons: cds_start_Position, cds_end_Position, 
#
# UNIMPLEMENTED -- TBD
# * inversion
# * IVS#, EX#
# * eq/unk effect (=, ?)
# * complex variants (c.[];[] or c.[;])
#
# UNIMPLEMENTED -- PURPOSEFULLY EXCLUDED FOR NOW
# Many symbols suggested in 3 have been purposefully excluded.  They are
# listed below with brief rationale:
# * d, u (downstream, upstream) -- By definition, these refer to positions
# outside the transcript, which necessarily means that the identity of the
# position depends on external data. 
# * gene symbols (and gene symbol suffixes, _i and _v) -- these do not
# refer to a sequence precisely. 
# * other uncertainty (e.g., '(;)')
# * non-measurements (e.g., 'p.0')
# * uncertain positions (?)


############################################################################
## Top-level parser
# Each of these right-hand productions is expected to return a Variant
# instance

hgvs_variant = c_variant | p_variant | r_variant | gmn_variant
hgva_variant_lax = hgvs_variant | any_variant

c_variant = accn:ac ':' 'c':type '.' c_interval:interval dna_edit:edit -> Variant(ac,type,interval,edit)

gmn_variant = accn:ac ':' gmn_type:type '.' interval:interval dna_edit:edit -> Variant(ac,type,interval,edit)
gmn_type = :x ?(x in 'gmn') -> x

r_variant = accn:ac ':' 'r':type '.' interval:interval rna_edit:edit -> Variant(ac,type,interval,edit)

p_variant = Not_Yet_Implemented

# any_variant: lax parser with minimal syntactic validation
any_variant = accn:ac ':' any_type:type '.' any_interval:interval any_edits:edits -> Variant(ac,type,interval,edits)
any_type = :x ?(x in 'cgmnpr') -> x
any_interval = <interval | pos>
any_edits = <anything+>


############################################################################
## Edits

dna_edit = dna_subst | dna_delins | dna_ins | dna_del | dna_dup
dna_del = 'del' (<num>|<dna*>):pre -> DelIns(pre=pre,post=None)
dna_delins = 'del' (<num>|<dna*>):pre 'ins' <dna+>:post  -> DelIns(pre=pre,post=post)
dna_dup = 'dup' <dna*>:seq -> Dup(seq=seq)
dna_ins = 'ins' <dna+>:post -> DelIns(pre=None,post=post)
dna_subst = dna:pre '>' dna:post -> DelIns(pre=pre,post=post)

rna_edit = Not_Yet_Implemented


############################################################################
## Basic types

dna_seq = <dna+>
dna = :x ?(x in 'ACGTacgt') -> x

rna_seq = <rna+>
rna = :x ?(x in 'ACGUacgu') -> x

aa1_seq = <aa1+>
aa1 = :x ?(x in 'ACDEFGHIKLMNPQRSTVWY') -> x

aa3_seq = <aa3+>
aa3 = :x ?(x in ['Ala','Cys','Asp','Glu','Phe','Gly','His','Iso','Lys','Leu',
				 'Met','Asn','Pro','Gln','Arg','Ser','Thr','Val','Trp','Tyr']) -> x

# MISSING: base +- '?'
# MISSING: uncertain positions ()
c_interval = (c_pos:start '_' c_pos:end -> Interval(start,end)) | (c_pos:start -> Interval(start,start))
c_pos = ('*' num:x -> CDSPosition(0,x)) 
		| ('-' num:x -> CDSPosition(0,-x))
		| (num:b (snum | -> 0):o -> CDSPosition(b,o))

interval = (pos:start '_' pos:end -> Interval(start,end)) | (pos:start -> Interval(start,start))
pos = num:pos -> Position(pos)

# Accessions, possibly versioned. Should accept, e.g., NM_01234.5, LRG_01234_1p1
accn = <letter letterOrDigit+ ('_' letterOrDigit+)? ('.' digit+)?>

snum = <pm? num>:x -> int(x)
num = <digit+>:x -> int(x)
pm = :x ?(x in '-+') -> x

Not_Yet_Implemented = 'NOT YET IMPLEMENTED'
